import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { useToast } from '@/hooks/use-toast';

interface ScoringData {
  team1: string;
  team2: string;
  venue: string;
  matchDate: string;
  team1Score: string;
  team2Score: string;
  winner: string;
  playerOfMatch: string;
  matchSummary: string;
}

export default function FanScoring() {
  const [activeTab, setActiveTab] = useState<'create' | 'score'>('create');
  const [currentMatch, setCurrentMatch] = useState<any>(null);
  const [scoringData, setScoringData] = useState<ScoringData | null>(null);
  const { toast } = useToast();
  
  const { register, handleSubmit, formState: { errors }, reset } = useForm<ScoringData>();

  const handleCreateMatch = (data: ScoringData) => {
    setCurrentMatch(data);
    setScoringData(data);
    setActiveTab('score');
    toast({ title: "Match Created", description: "Match setup complete. Start scoring!" });
  };

  const handleDownloadReport = () => {
    if (!scoringData) return;

    const reportContent = `
CRICKET MATCH REPORT
==================

Match: ${scoringData.team1} vs ${scoringData.team2}
Venue: ${scoringData.venue}
Date: ${scoringData.matchDate}

SCORES:
${scoringData.team1}: ${scoringData.team1Score}
${scoringData.team2}: ${scoringData.team2Score}

Winner: ${scoringData.winner}
Player of the Match: ${scoringData.playerOfMatch}

Match Summary:
${scoringData.matchSummary}

Generated by Tuskers CC Fan Scoring System
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${scoringData.team1}_vs_${scoringData.team2}_report.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({ title: "Report Downloaded", description: "Match report saved successfully!" });
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-[#1e3a8a] mb-4">Fan Cricket Scoring</h1>
          <p className="text-xl text-gray-600">Score your local matches and generate professional reports</p>
        </div>

        {/* Navigation Tabs */}
        <div className="flex justify-center mb-8">
          <div className="bg-white rounded-lg p-1 shadow-lg">
            <button
              onClick={() => setActiveTab('create')}
              className={`px-6 py-3 rounded-lg font-semibold transition-colors ${
                activeTab === 'create'
                  ? 'bg-[#1e3a8a] text-white'
                  : 'text-[#1e3a8a] hover:bg-blue-50'
              }`}
            >
              Create Match
            </button>
            <button
              onClick={() => setActiveTab('score')}
              className={`px-6 py-3 rounded-lg font-semibold transition-colors ${
                activeTab === 'score'
                  ? 'bg-[#1e3a8a] text-white'
                  : 'text-[#1e3a8a] hover:bg-blue-50'
              }`}
              disabled={!currentMatch}
            >
              Score Match
            </button>
          </div>
        </div>

        {/* Create Match Tab */}
        {activeTab === 'create' && (
          <div className="max-w-2xl mx-auto">
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <h2 className="text-2xl font-bold text-[#1e3a8a] mb-6">Setup New Match</h2>
              
              <form onSubmit={handleSubmit(handleCreateMatch)} className="space-y-6">
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Team 1
                    </label>
                    <input
                      {...register('team1', { required: 'Team 1 name is required' })}
                      type="text"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-transparent"
                      placeholder="Enter team 1 name"
                    />
                    {errors.team1 && (
                      <p className="text-red-600 text-sm mt-1">{errors.team1.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Team 2
                    </label>
                    <input
                      {...register('team2', { required: 'Team 2 name is required' })}
                      type="text"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-transparent"
                      placeholder="Enter team 2 name"
                    />
                    {errors.team2 && (
                      <p className="text-red-600 text-sm mt-1">{errors.team2.message}</p>
                    )}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Venue
                  </label>
                  <input
                    {...register('venue', { required: 'Venue is required' })}
                    type="text"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-transparent"
                    placeholder="Enter match venue"
                  />
                  {errors.venue && (
                    <p className="text-red-600 text-sm mt-1">{errors.venue.message}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Match Date
                  </label>
                  <input
                    {...register('matchDate', { required: 'Match date is required' })}
                    type="date"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-transparent"
                  />
                  {errors.matchDate && (
                    <p className="text-red-600 text-sm mt-1">{errors.matchDate.message}</p>
                  )}
                </div>

                <button
                  type="submit"
                  className="w-full bg-[#1e3a8a] text-white py-3 px-4 rounded-lg font-semibold hover:bg-[#1e40af] transition-colors"
                >
                  Create Match & Start Scoring
                </button>
              </form>
            </div>
          </div>
        )}

        {/* Score Match Tab */}
        {activeTab === 'score' && currentMatch && (
          <div className="max-w-4xl mx-auto">
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <div className="text-center mb-8">
                <h2 className="text-2xl font-bold text-[#1e3a8a] mb-2">
                  {currentMatch.team1} vs {currentMatch.team2}
                </h2>
                <p className="text-gray-600">{currentMatch.venue} â€¢ {currentMatch.matchDate}</p>
              </div>

              <form onSubmit={handleSubmit((data) => setScoringData({...currentMatch, ...data}))} className="space-y-6">
                <div className="grid md:grid-cols-2 gap-6">
                  <div className="bg-blue-50 rounded-lg p-6">
                    <h3 className="text-lg font-bold text-[#1e3a8a] mb-4">{currentMatch.team1}</h3>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Final Score
                      </label>
                      <input
                        {...register('team1Score', { required: 'Score is required' })}
                        type="text"
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-transparent"
                        placeholder="e.g., 245/6 (50 overs)"
                      />
                    </div>
                  </div>

                  <div className="bg-green-50 rounded-lg p-6">
                    <h3 className="text-lg font-bold text-[#1e3a8a] mb-4">{currentMatch.team2}</h3>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Final Score
                      </label>
                      <input
                        {...register('team2Score', { required: 'Score is required' })}
                        type="text"
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-transparent"
                        placeholder="e.g., 198/9 (48.2 overs)"
                      />
                    </div>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Match Winner
                  </label>
                  <select
                    {...register('winner', { required: 'Winner is required' })}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-transparent"
                  >
                    <option value="">Select winner</option>
                    <option value={currentMatch.team1}>{currentMatch.team1}</option>
                    <option value={currentMatch.team2}>{currentMatch.team2}</option>
                    <option value="Draw">Draw</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Player of the Match
                  </label>
                  <input
                    {...register('playerOfMatch', { required: 'Player of the match is required' })}
                    type="text"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-transparent"
                    placeholder="Enter player name and performance"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Match Summary
                  </label>
                  <textarea
                    {...register('matchSummary', { required: 'Match summary is required' })}
                    rows={4}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-transparent"
                    placeholder="Describe key moments, partnerships, bowling figures, etc."
                  />
                </div>

                <div className="flex gap-4">
                  <button
                    type="submit"
                    className="flex-1 bg-[#1e3a8a] text-white py-3 px-4 rounded-lg font-semibold hover:bg-[#1e40af] transition-colors"
                  >
                    Save Match Data
                  </button>
                  
                  {scoringData && (
                    <button
                      type="button"
                      onClick={handleDownloadReport}
                      className="flex-1 bg-green-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-green-700 transition-colors"
                    >
                      <i className="fas fa-download mr-2"></i>
                      Download Report
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Instructions */}
        <div className="max-w-4xl mx-auto mt-12">
          <div className="bg-white rounded-2xl shadow-lg p-8">
            <h3 className="text-xl font-bold text-[#1e3a8a] mb-4">How to Use Fan Scoring</h3>
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold text-gray-900 mb-2">1. Create Match</h4>
                <p className="text-gray-600 text-sm">Enter team names, venue, and match date to set up your scoring session.</p>
              </div>
              <div>
                <h4 className="font-semibold text-gray-900 mb-2">2. Score Match</h4>
                <p className="text-gray-600 text-sm">Record final scores, winner, player of the match, and match summary.</p>
              </div>
              <div>
                <h4 className="font-semibold text-gray-900 mb-2">3. Generate Report</h4>
                <p className="text-gray-600 text-sm">Download a professional match report that you can share or keep for records.</p>
              </div>
              <div>
                <h4 className="font-semibold text-gray-900 mb-2">4. Share Results</h4>
                <p className="text-gray-600 text-sm">Use the report to announce results on social media or team communications.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}